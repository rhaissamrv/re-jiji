{"ast":null,"code":"var _jsxFileName = \"/home/rhaissa/Documents/Documents/Learning how to code/1. EvolveU/1. Projects/EvolveU_Project_2/evolveu-c6-project-02/client/src/Pages/LogIn.js\";\nimport React, { useState, useContext } from \"react\";\nimport Card from \"../Shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../Shared/components/UIElements/LoadingSpinner.JS\";\nimport Input from \"../Shared/components/FormElements/Input\";\nimport Button from \"../Shared/components/FormElements/Button\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH } from \"../components/util/validators\";\nimport { useForm } from \"../Shared/hooks/form-hook\";\nimport { AuthContext } from \"../Shared/components/context/auth-context\";\nimport { useHttpClient } from \"../Shared/hooks/http-hook\";\nimport ErrorModal from \"../Shared/components/UIElements/ErrorModal\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./LogIn.css\";\n\nconst LogIn = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient(); // form handiling hook\n\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: \"\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  }, false); // const switchModeHandler = () => {\n  //   if (!isLoginMode) {\n  //     setFormData(\n  //       {\n  //         ...formState.inputs,\n  //         name: undefined,\n  //       },\n  //       formState.inputs.email.isValid && formState.inputs.password.isValid\n  //     );\n  //   } else {\n  //     setFormData(\n  //       {\n  //         ...formState.inputs,\n  //         name: {\n  //           value: \"\",\n  //           isValid: false,\n  //         },\n  //       },\n  //       false\n  //     );\n  //   }\n  //   setIsLoginMode(prevMode => !prevMode);\n  // };\n\n  const logInSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await fetch(\"/api/users/login\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const user = await responseData.json(); // console.log(\"user:\", user)\n        // set up no sending to user  page\n\n        auth.userId = user._id;\n        auth.isLoggedIn = true;\n        history.push(`/user_profile/${user._id}`);\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        const responseData = await fetch(\"/api/users/signup\", {\n          method: \"POST\",\n          header: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    //handiling the inputes in the form\n    React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(ErrorModal, {\n      error: error,\n      onClear: clearError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      className: \"authentication\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: logInSubmitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      className: \"log-in-input\",\n      element: \"input\",\n      id: \"email\",\n      type: \"email\",\n      label: \"E-Mail\",\n      validators: [VALIDATOR_EMAIL()],\n      errorText: \"Please enter a valid email address.\",\n      onInput: inputHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      element: \"input\",\n      id: \"password\",\n      type: \"password\",\n      label: \"Password\",\n      validators: [VALIDATOR_MINLENGTH(6)],\n      errorText: \"Please enter a valid password, at least 6 characters.\",\n      onInput: inputHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      disabled: !formState.isValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, isLoginMode ? \"LOGIN\" : \"SIGNUP\"))))\n  );\n};\n\nexport default LogIn;","map":{"version":3,"sources":["/home/rhaissa/Documents/Documents/Learning how to code/1. EvolveU/1. Projects/EvolveU_Project_2/evolveu-c6-project-02/client/src/Pages/LogIn.js"],"names":["React","useState","useContext","Card","LoadingSpinner","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","useForm","AuthContext","useHttpClient","ErrorModal","useHistory","LogIn","history","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","logInSubmitHandler","event","preventDefault","responseData","fetch","method","body","JSON","stringify","inputs","headers","user","json","userId","_id","isLoggedIn","push","err","console","log","header","name","login","id"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\n\nimport Card from \"../Shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../Shared/components/UIElements/LoadingSpinner.JS\";\nimport Input from \"../Shared/components/FormElements/Input\";\nimport Button from \"../Shared/components/FormElements/Button\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n} from \"../components/util/validators\";\nimport { useForm } from \"../Shared/hooks/form-hook\";\nimport { AuthContext } from \"../Shared/components/context/auth-context\";\nimport { useHttpClient } from \"../Shared/hooks/http-hook\";\nimport ErrorModal from \"../Shared/components/UIElements/ErrorModal\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./LogIn.css\";\n\nconst LogIn = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n  \n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n// form handiling hook\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  // const switchModeHandler = () => {\n  //   if (!isLoginMode) {\n  //     setFormData(\n  //       {\n  //         ...formState.inputs,\n  //         name: undefined,\n  //       },\n  //       formState.inputs.email.isValid && formState.inputs.password.isValid\n  //     );\n  //   } else {\n  //     setFormData(\n  //       {\n  //         ...formState.inputs,\n  //         name: {\n  //           value: \"\",\n  //           isValid: false,\n  //         },\n  //       },\n  //       false\n  //     );\n  //   }\n  //   setIsLoginMode(prevMode => !prevMode);\n  // };\n\n  const logInSubmitHandler = async (event) => {\n    \n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await fetch(\"/api/users/login\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n        const user = await responseData.json();\n        // console.log(\"user:\", user)\n        // set up no sending to user  page\n        \n        auth.userId = user._id;\n        auth.isLoggedIn = true\n        history.push(`/user_profile/${user._id}`);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n     else {\n      try \n      {\n        const responseData = await fetch(\"/api/users/signup\", {\n          method: \"POST\",\n          header: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n        });\n\n        auth.login(responseData.user.id);\n      }\n       catch (err) {}\n    }\n  };\n\n  return (\n    //handiling the inputes in the form\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        <form onSubmit={logInSubmitHandler}>\n          <Input\n            className=\"log-in-input\"\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n          </Button>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default LogIn;\n"]},"metadata":{},"sourceType":"module"}