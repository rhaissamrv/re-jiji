{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { AuthContext } from '../../Shared/components/context/auth-context';\nimport { useHistory, useParams } from 'react-router-dom';\n\nconst useFormNewListing = callback => {\n  const [values, setValues] = useState({\n    category: '',\n    title: '',\n    // image:'',\n    description: '',\n    quantity: '',\n    location: '',\n    userId: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(false); // const auth = useContext(AuthContext);\n\n  const userId = useParams();\n  const userIdString = userId.id;\n  console.log('userIdString', userIdString); // console.log(\"auth._id:\", auth._id )\n\n  const history = useHistory(); //e = events\n  // handleChange =  when you change something, you want to update the value\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target.value;\n    setValues({ ...values,\n      //spreading the values, targets the name in the formsignup\n      [name]: value\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch('/api/listings/create_listing', {\n        method: 'POST',\n        body: JSON.stringify({\n          category: values.category,\n          title: values.title,\n          //   image: values.image,\n          description: values.description,\n          quantity: values.quantity,\n          location: values.location,\n          userId: userIdString\n        }),\n        headers: {\n          \"Content-Type\": 'application/json'\n        }\n      });\n      const responseData = await response.json(); //this should be our createUser data from users-controllers\n\n      if (response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      console.log(\"responseData\", responseData);\n      history.push(`/user_profile/${userIdString}`);\n      console.log(responseData);\n    } catch (err) {\n      console.log(err);\n      setError(err.message || 'Something went wrong, please try again.');\n    }\n\n    ; // setErrors(validate(values));\n\n    setIsSubmitting(true);\n  }; // useEffect(\n  //     () => {\n  //         if(Object.keys(errors).length === 0 && isSubmitting){\n  //             callback();\n  //         }\n  //     },\n  //     [errors]\n  // );\n\n\n  return {\n    handleChange,\n    values,\n    handleSubmit,\n    errors\n  };\n};\n\nexport default useFormNewListing;","map":{"version":3,"sources":["/home/rhaissa/Documents/Documents/Learning how to code/1. EvolveU/1. Projects/EvolveU_Project_2/evolveu-c6-project-02/client/src/components/ListingForm/useFormNewListing.js"],"names":["useState","useEffect","AuthContext","useHistory","useParams","useFormNewListing","callback","values","setValues","category","title","description","quantity","location","userId","errors","setErrors","isSubmitting","setIsSubmitting","error","setError","userIdString","id","console","log","history","handleChange","e","name","value","target","handleSubmit","preventDefault","response","fetch","method","body","JSON","stringify","headers","responseData","json","ok","Error","message","push","err"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport { AuthContext } from '../../Shared/components/context/auth-context';\nimport { useHistory, useParams } from 'react-router-dom';\n\nconst useFormNewListing = (callback) => {\n  const [values, setValues] = useState({\n    category: '',\n    title: '',\n    // image:'',\n    description:'',\n    quantity: '',\n    location: '',\n    userId:''\n});\nconst [errors, setErrors] = useState({});\nconst [isSubmitting, setIsSubmitting] = useState (false);\nconst [error, setError] = useState(false);\n\n// const auth = useContext(AuthContext);\nconst userId = useParams();\n\nconst userIdString = userId.id;\n\nconsole.log('userIdString', userIdString)\n// console.log(\"auth._id:\", auth._id )\n\nconst history = useHistory();\n\n//e = events\n// handleChange =  when you change something, you want to update the value\n\nconst handleChange = e => {\n    const {name, value} = e.target.value;\n    setValues ({\n        ...values, //spreading the values, targets the name in the formsignup\n        [name]:value\n    });\n};\n\nconst handleSubmit = async e => {\n    e.preventDefault();\n    try{\n      const response = await fetch('/api/listings/create_listing', {\n          method: 'POST',\n          body: JSON.stringify({\n              category: values.category,\n              title: values.title,\n              //   image: values.image,\n              description:values.description,\n              quantity: values.quantity,\n              location: values.location,\n              userId: userIdString\n            }),\n            headers: {\n                \"Content-Type\": 'application/json'\n            },\n        });\n        \n      const responseData = await response.json(); //this should be our createUser data from users-controllers\n      if (response.ok) {\n          throw new Error(responseData.message);\n\n      }\n      console.log(\"responseData\", responseData)\n      history.push(`/user_profile/${userIdString}`)\n\n      console.log(responseData);\n    } catch(err) {\n        console.log(err);\n        setError(err.message || 'Something went wrong, please try again.');\n    };\n\n    // setErrors(validate(values));\n    setIsSubmitting (true);\n};\n    // useEffect(\n    //     () => {\n    //         if(Object.keys(errors).length === 0 && isSubmitting){\n    //             callback();\n    //         }\n    //     },\n    //     [errors]\n    // );\n    \n    return {handleChange, values, handleSubmit, errors};\n};\n\nexport default useFormNewListing;\n"]},"metadata":{},"sourceType":"module"}