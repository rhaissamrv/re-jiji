{"ast":null,"code":"var _jsxFileName = \"/home/rhaissa/Documents/Documents/Learning how to code/1. EvolveU/1. Projects/EvolveU_Project_2/evolveu-c6-project-02/client/src/Pages/LogIn.js\";\nimport React, { useState, useContext } from \"react\";\nimport Card from \"../Shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../Shared/components/UIElements/LoadingSpinner.JS\";\nimport Input from \"../Shared/components/FormElements/Input\";\nimport Button from \"../Shared/components/FormElements/Button\";\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH } from \"../components/util/validators\";\nimport { useForm } from \"../Shared/hooks/form-hook\";\nimport { AuthContext } from \"../Shared/components/context/auth-context\";\nimport { useHttpClient } from \"../Shared/hooks/http-hook\";\nimport ErrorModal from \"../Shared/components/UIElements/ErrorModal\";\nimport { useHistory } from 'react-router-dom';\nimport \"./LogIn.css\";\n\nconst LogIn = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n  console.log(auth);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: \"\",\n      isValid: false\n    },\n    password: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({ ...formState.inputs,\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: \"\",\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const logInSubmitHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await fetch(\"/api/users/login\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const user = await responseData.json(); // set up no sending to user  page \n\n        auth.userId = user._id;\n        history.push('/user_profile');\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        const responseData = await fetch(\"/api/users/signup\", {\n          method: \"POST\",\n          header: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, \"THIS IS A TEST\") // <React.Fragment>\n  //   <ErrorModal error={error} onClear={clearError} />\n  //   <Card className=\"authentication\">\n  //     {isLoading && <LoadingSpinner asOverlay />}\n  //     <h2>Login Required</h2>\n  //     <hr />\n  //     <form onSubmit={logInSubmitHandler}>\n  //       {/* {!isLoginMode && (\n  //         <Input\n  //           element=\"input\"\n  //           id=\"name\"\n  //           type=\"text\"\n  //           label=\"Your Name\"\n  //           // validators={[VALIDATOR_REQUIRE()]}\n  //           errorText=\"Please enter a name.\"\n  //           onInput={inputHandler}\n  //         />\n  //       )} */}\n  //       <Input\n  //         className=\"log-in-input\"\n  //         element=\"input\"\n  //         id=\"email\"\n  //         type=\"email\"\n  //         label=\"E-Mail\"\n  //         validators={[VALIDATOR_EMAIL()]}\n  //         errorText=\"Please enter a valid email address.\"\n  //         onInput={inputHandler}\n  //       />\n  //       <Input\n  //         element=\"input\"\n  //         id=\"password\"\n  //         type=\"password\"\n  //         label=\"Password\"\n  //         validators={[VALIDATOR_MINLENGTH(6)]}\n  //         errorText=\"Please enter a valid password, at least 6 characters.\"\n  //         onInput={inputHandler}\n  //       />\n  //       <Button type=\"submit\" disabled={!formState.isValid}>\n  //         {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n  //       </Button>\n  //     </form>\n  //   </Card>\n  // </React.Fragment>\n  ;\n};\n\nexport default LogIn;","map":{"version":3,"sources":["/home/rhaissa/Documents/Documents/Learning how to code/1. EvolveU/1. Projects/EvolveU_Project_2/evolveu-c6-project-02/client/src/Pages/LogIn.js"],"names":["React","useState","useContext","Card","LoadingSpinner","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","useForm","AuthContext","useHttpClient","ErrorModal","useHistory","LogIn","history","auth","console","log","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","prevMode","logInSubmitHandler","event","preventDefault","responseData","fetch","method","body","JSON","stringify","headers","user","json","userId","_id","push","err","header","login","id"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\n\nimport Card from \"../Shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../Shared/components/UIElements/LoadingSpinner.JS\";\nimport Input from \"../Shared/components/FormElements/Input\";\nimport Button from \"../Shared/components/FormElements/Button\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n} from \"../components/util/validators\";\nimport { useForm } from \"../Shared/hooks/form-hook\";\nimport { AuthContext } from \"../Shared/components/context/auth-context\";\nimport { useHttpClient } from \"../Shared/hooks/http-hook\";\nimport ErrorModal from \"../Shared/components/UIElements/ErrorModal\";\nimport { useHistory } from 'react-router-dom'\nimport \"./LogIn.css\";\n\nconst LogIn = () => {\n  const history = useHistory();\n  const auth = useContext(AuthContext);\n  console.log(auth)\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const logInSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      \n      try {\n        const responseData = await fetch(\n          \"/api/users/login\",\n          {\n            method: \"POST\",\n            body: JSON.stringify({\n              email: formState.inputs.email.value,\n              password: formState.inputs.password.value,\n            }),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n        const user = await responseData.json();\n        // set up no sending to user  page \n        auth.userId = user._id\n        history.push('/user_profile')\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      try {\n        const responseData = await fetch(\n          \"/api/users/signup\",\n          {\n            method: \"POST\",\n            header: {\n              \"Content-Type\": \"application/json\",\n            },\n            body:  JSON.stringify({\n              name: formState.inputs.name.value,\n              email: formState.inputs.email.value,\n              password: formState.inputs.password.value,\n            })\n          }         \n        );\n\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  return (\n\n    <h1>THIS IS A TEST</h1>\n    // <React.Fragment>\n    //   <ErrorModal error={error} onClear={clearError} />\n    //   <Card className=\"authentication\">\n    //     {isLoading && <LoadingSpinner asOverlay />}\n    //     <h2>Login Required</h2>\n    //     <hr />\n    //     <form onSubmit={logInSubmitHandler}>\n    //       {/* {!isLoginMode && (\n    //         <Input\n    //           element=\"input\"\n    //           id=\"name\"\n    //           type=\"text\"\n    //           label=\"Your Name\"\n    //           // validators={[VALIDATOR_REQUIRE()]}\n    //           errorText=\"Please enter a name.\"\n    //           onInput={inputHandler}\n    //         />\n    //       )} */}\n    //       <Input\n    //         className=\"log-in-input\"\n    //         element=\"input\"\n    //         id=\"email\"\n    //         type=\"email\"\n    //         label=\"E-Mail\"\n    //         validators={[VALIDATOR_EMAIL()]}\n    //         errorText=\"Please enter a valid email address.\"\n    //         onInput={inputHandler}\n    //       />\n    //       <Input\n    //         element=\"input\"\n    //         id=\"password\"\n    //         type=\"password\"\n    //         label=\"Password\"\n    //         validators={[VALIDATOR_MINLENGTH(6)]}\n    //         errorText=\"Please enter a valid password, at least 6 characters.\"\n    //         onInput={inputHandler}\n    //       />\n    //       <Button type=\"submit\" disabled={!formState.isValid}>\n    //         {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n    //       </Button>\n    //     </form>\n    //   </Card>\n    // </React.Fragment>\n  );\n};\n\nexport default LogIn;"]},"metadata":{},"sourceType":"module"}