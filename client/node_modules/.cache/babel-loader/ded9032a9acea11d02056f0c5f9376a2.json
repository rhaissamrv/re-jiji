{"ast":null,"code":"import { useState, useEffect } from 'react'; // import React, {useState} from './FormSignUp';\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    username: '',\n    email: '',\n    password: '',\n    password2: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(false); //e = events\n  // handleChange =  when you change something, you want to update the value\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      //spreading the values, targets the name in the formsignup\n      [name]: value\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch('/api/users/signup', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify({\n          username: values.username,\n          email: values.email,\n          password: values.password\n        })\n      });\n      const responseData = await response.json(); //this should be our createUser data from users-controllers\n\n      if (response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      console.log(responseData);\n    } catch (err) {\n      console.log(err);\n      setError(err.message || 'Something went wrong, please try again.');\n    }\n\n    ;\n    setErrors(validate(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n  return {\n    handleChange,\n    values,\n    handleSubmit,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/home/rhaissa/Documents/Documents/Learning how to code/1. EvolveU/1. Projects/EvolveU_Project_2_Public/evolveU-c6-p2/client/src/components/SignUp/useForm.js"],"names":["useState","useEffect","useForm","callback","validate","values","setValues","username","email","password","password2","errors","setErrors","isSubmitting","setIsSubmitting","error","setError","handleChange","e","name","value","target","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","responseData","json","ok","Error","message","console","log","err","Object","keys","length"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC,C,CACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACnCO,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,KAAK,EAAE,EAF4B;AAGnCC,IAAAA,QAAQ,EAAC,EAH0B;AAInCC,IAAAA,SAAS,EAAC;AAJyB,GAAD,CAApC;AAMF,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAE,KAAF,CAAhD;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,KAAD,CAAlC,CATwC,CAWxC;AACA;;AAEA,QAAMiB,YAAY,GAAGC,CAAC,IAAI;AACtB,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,CAAC,CAACG,MAAxB;AACAf,IAAAA,SAAS,CAAE,EACP,GAAGD,MADI;AACI;AACX,OAACc,IAAD,GAAOC;AAFA,KAAF,CAAT;AAIH,GAND;;AAQA,QAAME,YAAY,GAAG,MAAMJ,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACK,cAAF;;AACA,QAAG;AACD,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAD,EAAsB;AAC9CC,QAAAA,MAAM,EAAE,MADsC;AAE9CC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFqC;AAK9CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBvB,UAAAA,QAAQ,EAAEF,MAAM,CAACE,QADA;AAEjBC,UAAAA,KAAK,EAAEH,MAAM,CAACG,KAFG;AAGjBC,UAAAA,QAAQ,EAAEJ,MAAM,CAACI;AAHA,SAAf;AALwC,OAAtB,CAA5B;AAYA,YAAMsB,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B,CAbC,CAa2C;;AAC5C,UAAIR,QAAQ,CAACS,EAAb,EAAiB;AACb,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AAEH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACD,KAnBD,CAmBE,OAAMO,GAAN,EAAW;AACTF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAtB,MAAAA,QAAQ,CAACsB,GAAG,CAACH,OAAJ,IAAe,yCAAhB,CAAR;AACH;;AAAA;AAEDvB,IAAAA,SAAS,CAACR,QAAQ,CAACC,MAAD,CAAT,CAAT;AACAS,IAAAA,eAAe,CAAE,IAAF,CAAf;AACH,GA5BD;;AA6BIb,EAAAA,SAAS,CACL,MAAM;AACF,QAAGsC,MAAM,CAACC,IAAP,CAAY7B,MAAZ,EAAoB8B,MAApB,KAA+B,CAA/B,IAAoC5B,YAAvC,EAAoD;AAChDV,MAAAA,QAAQ;AACX;AACJ,GALI,EAML,CAACQ,MAAD,CANK,CAAT;AASA,SAAO;AAACM,IAAAA,YAAD;AAAeZ,IAAAA,MAAf;AAAuBiB,IAAAA,YAAvB;AAAqCX,IAAAA;AAArC,GAAP;AACH,CA7DD;;AA+DA,eAAeT,OAAf","sourcesContent":["import {useState, useEffect} from 'react'\n// import React, {useState} from './FormSignUp';\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    username: '',\n    email: '',\n    password:'',\n    password2:''\n});\nconst [errors, setErrors] = useState({});\nconst [isSubmitting, setIsSubmitting] = useState (false);\nconst [error, setError] = useState(false);\n\n//e = events\n// handleChange =  when you change something, you want to update the value\n\nconst handleChange = e => {\n    const {name, value} = e.target;\n    setValues ({\n        ...values, //spreading the values, targets the name in the formsignup\n        [name]:value\n    });\n};\n\nconst handleSubmit = async e => {\n    e.preventDefault();\n    try{\n      const response = await fetch('/api/users/signup', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": 'application/json'\n          },\n          body: JSON.stringify({\n              username: values.username,\n              email: values.email,\n              password: values.password\n          })\n      });\n\n      const responseData = await response.json(); //this should be our createUser data from users-controllers\n      if (response.ok) {\n          throw new Error(responseData.message);\n\n      }\n      console.log(responseData);\n    } catch(err) {\n        console.log(err);\n        setError(err.message || 'Something went wrong, please try again.');\n    };\n\n    setErrors(validate(values));\n    setIsSubmitting (true);\n};\n    useEffect(\n        () => {\n            if(Object.keys(errors).length === 0 && isSubmitting){\n                callback();\n            }\n        },\n        [errors]\n    );\n    \n    return {handleChange, values, handleSubmit, errors};\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}